/*
 *  CS312 Assignment 2.
 *  On my honor, <NAME>, this programming assignment is my own work.
 *
 *  A program to print out the UT Tower in ASCII art form.
 *
 *  Name:
 *  email address:
 *  UTEID:
 *  Section 5 digit ID:
 *  Grader name:
 *  Number of slip days used on this assignment:
 */

public class Tower {
    
    // CS312 students, DO NOT ALTER THE FOLLOWING LINE except for the 
    // value of the literal int.
    // You may change the literal int assigned to SIZE to any value from 2 to 100.
    // In the final version of the program you submit set the SIZE to 3.

    public static final int SIZE = 3;

    //All values algorithmically determined, no magic numbers
    public static final int NUM_TOP_TIER_ELEMENTS = ((SIZE - 1)*2);
    public static final int NUM_TOP_TIER_ROWS = ((2 * SIZE) - 2);
    public static final int NUM_SECOND_TIER_ELEMENTS = SIZE;
    public static final int NUM_SECOND_TIER_ROWS = (SIZE * SIZE);
    public static final int NUM_THIRD_TIER_ROWS = ((SIZE / 2) + 1);
    public static final int NUM_FOURTH_TIER_ELEMENTS = (SIZE * 5);
    public static final int NUM_FOURTH_TIER_ROWS = SIZE;
    public static final int MAX_WIDTH = (10 * SIZE) + 3; //by observation and deduction

    public static final String strSpace = " ";
    public static final String strTilde = "~";
    public static final String strHashMark = "#";
        
    

    public static void main(String[] args) 
    {
        //String variables we'll be using later to build rows
        String strLeftChars = "";
        String strRightChars = "#";
        String strCurRepeatingElement = "#";
        String strCurRow = "";

        //counters for the for loops coming up
        int intPaddingLength = 0;

 

        //Generate the hashmarks that frame the first tier
        String strHashes = strLeftChars + strHashMark.repeat(NUM_TOP_TIER_ELEMENTS) + strRightChars;

        //Determine amount of left space padding to center this component of the image
        
        intPaddingLength = (MAX_WIDTH - strHashes.length())/2;

        for(int intCurElement = 0;intCurElement < intPaddingLength; intCurElement++)
        {
            strHashes = " " + strHashes;
        }

        //Print the first row of hashmarks
        System.out.println(strHashes);

        //Print first element.  
        strRightChars = "|";
        strLeftChars = "";
        strCurRepeatingElement = "|";
        //Generate the rows, each row comprised of LEFT_CHARS + REPEATING ELEMENTS + RIGHT_CHARS
        
        for (int intCurRow = 0; intCurRow < NUM_TOP_TIER_ROWS; intCurRow++)
                {
                    strCurRow = strLeftChars = strCurRepeatingElement.repeat(NUM_TOP_TIER_ELEMENTS) + strRightChars;
                    strCurRow = strSpace.repeat((MAX_WIDTH - strCurRow.length())/2) + strCurRow;
                    System.out.println(strCurRow);
                }
        
        //Print the bottom row of hashmarks
        System.out.println(strHashes);

        //Generate and print second element
        //This element has a header row of tildes (~)
        strCurRepeatingElement = "O-";
        strLeftChars = "|-";
        strRightChars = "|";
        String strRepeatingRow = strLeftChars + strCurRepeatingElement.repeat(NUM_SECOND_TIER_ELEMENTS) + strRightChars;
        String strPadding = strSpace.repeat((MAX_WIDTH - strRepeatingRow.length())/2);
        String strTildes = strPadding + strTilde.repeat(strRepeatingRow.length());
        strRepeatingRow = strPadding + strRepeatingRow;
        
        
        for (int intCurRow = 0; intCurRow < NUM_SECOND_TIER_ROWS; intCurRow++)
        {
            System.out.println(strTildes);
            System.out.println(strRepeatingRow);
        }
        System.out.println(strTildes);
        

        //Print the Third tier
        //The third element varies by having multiple rows with different widths.  
        //The number of elements in the first row is generated by the algorithim. 
        strCurRepeatingElement = "\"'";
        strLeftChars = "/";
        strRightChars = "\"\\";
        
        for (int intCurRow = 1; intCurRow <= NUM_THIRD_TIER_ROWS; intCurRow++)
        {
            strCurRow = strLeftChars + strCurRepeatingElement.repeat((SIZE * 5) - ((NUM_THIRD_TIER_ROWS - intCurRow) * 3)) + strRightChars;
            strPadding = strSpace.repeat((MAX_WIDTH - strCurRow.length())/2);
            strCurRow = strPadding + strCurRow;
            System.out.println(strCurRow);
            strCurRow = "";
        }
        
        //Print the base
        strCurRepeatingElement = "\"O";
        strLeftChars = "/";
        strRightChars = "\"\\";
        

        for (int intCurRow = 0; intCurRow < NUM_FOURTH_TIER_ROWS; intCurRow++)
        {
            strCurRow = strLeftChars + strCurRepeatingElement.repeat(NUM_FOURTH_TIER_ELEMENTS) + strRightChars;
            System.out.println(strCurRow);
        }
        
    }
}
